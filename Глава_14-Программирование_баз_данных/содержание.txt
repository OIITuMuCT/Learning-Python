Программирование баз данных
    Системы управления базами данных(СУБД)
        * Система управления базами данных(СУБД) - это программное обеспечение, 
        которое управляет крупными коллекциями данных.
SQL 
Аббревиатура SQL - расшифровывается как Structured Query Language, т.е. язык
структурированных запросов. Указанный язык является стандартным для работы СУБД.
Первоначально он был разработан компанией IBM в 1970-х годах. С тех пор SQL был 
принят большинством поставщиков программного обеспечения для баз данных в 
качестве предпочтительного языка для взаимодействия с СУБД.

SQL состоит из нескольких ключевых слов, которые используются для конструирования
инструкций. Инструкции SQL передаются в СУБД и являются для СУБД командами по 
выполнению операций с ее данными. Когда приложение Python взаимодействует с СУБД,
оно должно создавать инструкцию SQL в виде строк, а затем использовать библиотечный 
метод для передачи этих строк в СУБД. В этой главе вы узнаете, как создавать 
простые инструкции SQL, а затем передавать их в СУБД с помощью библиотечного метода.

SQLite
    В настоящее время используется целый ряд СУБД, и Python может взаимодействовать 
со многими из них. Несколько наиболее популярных среди них - это MySQL, Oracle,
Microsoft SQL Server, PostgreSQL и SQLite. В этой книге мы опираемся на СУБД SQLite,
потому что она проста в использовании и инсталлируется в системе автоматически при 
установке Python. В целях использования СУБД SQLite вместе с Python необходимо 
импортировать модуль sqlite3 с помощью следующей инструкции:
import sqlite3

14.2 Таблицы, строки и столбцы
    Данные, хранящиеся в базе данных, организованны в таблицы, строки и столбцы.
СУБД хранит данные в базе данных. Данные, хранящиеся в базе данных, организованны 
в одну или несколько таблиц. Каждая таблица содержит набор связанных данных.
Данные, хранящиеся в таблице, упорядочиваются в строки и столбцы. 
        Строка - это полный набор данных об одном элементе. Данные хранящиеся в 
строке, делятся  на столбцы. Каждый столбец содержит отдельный фрагмент данных 
об элементе.

Типы данных в столбцах
Типы данных SQLite    Описание                Соответствующий тип данных Python
NULL                  Неизвестное значение      None
INTEGER               Целое число               int
REAL                  Вещественное число        float
TEXT                  Строковое значение        str
BLOB                  Двоичный большой объект   Может быть любым объектом

Краткое описание каждого из типов данных.
    * NULL - это тип данных может использоваться, если значение неизвестно или 
    отсутствует. Когда Python читает значение столбца NULL в память, это 
    значение конвертируется в значение None.
    
    * INTEGER - это тип данных содержит целочисленное значение со знаком. Когда
    Python читает значение INTEGER столбца в память, это значение конвертируется 
    в значение типа int.

    * REAL - это тип данных содержит действительное, или вещественное, число. 
    Когда Python читает значение REAL столбца в память, это значение конвертируется
    в значение типа float.

    * TEXT - это тип данных содержит строковое значение. Когда Python читает 
    значение TEXT столбца в память, это значение конвертируется в значение 
    типа str.

    * BLOB - это тип данных содержит объект любого типа, например массив или 
    изображение. Когда Python читает значение столбца BLOB в память, это значение
    конвертируется в объект bytes, который представляет собой немутируемую 
    последовательность байтов.

    Первичные ключи
    Таблицы базы данных обычно имеют первичный ключ, представляющий собой столбец, 
    который можно использовать для идентификации той или иной строки в таблице. 
    Столбец, назначенный в качестве первичного ключа, должен содержать уникальное 
    значение для каждой строки. Вот несколько примеров.
        
        * В таблице хранятся данные о сотрудниках, а в одном из столбцов содержатся 
        идентификационные номера сотрудников. Поскольку идентификационный номер 
        каждого сотрудника уникален, этот столбец можно использовать в качестве 
        первичного ключа(pk).
        
        * В таблице хранятся данные об изделиях, а в одном из столбцов содержится 
        серийный номер изделия. Поскольку каждое изделие имеет уникальный 
        серийный номер, этот столбец можно использовать в качестве первичного ключа.

        * В таблице хранятся данные счетов-фактур, а в одном из столбцов содержатся 
        их номера. Каждый счет-фактура имеет уникальный номер, поэтому этот столбец 
        можно использовать  в качестве первичного ключа.

14.3 Открытие и закрытие соединения с базой данных с помощью SQLite
    Прежде чем вы сможете работать с базой данных, вы должны к ней подсоединиться.
    Когда вы закончите работу с базой данных, вы должны закрыть соединение.

    Типичный процесс использования базы данных SQLite можно обобщить следующим
    псевдокодом:
        Подсоединиться к базе данных
        Получить курсор для базы данных
        Выполнить операции с базой данных
        Зафиксировать изменения в базе данных
        Закрыть соединение с базой данных
    
    Шаг 1
        * Подсоединится к базе данных. База данных SQLite хранится в файле на 
        системном диске. На этом шаге устанавливается соединение между программой
        и конкретным файлом базы данных. Если файл базы данных не существует, 
        он будет создан.
    Шаг 2
        * Получить курсор для базы данных. Курсор - это объект, который может 
        получать доступ к данным в базе данных и манипулировать ими.
    Шаг 3
        * Выполнить операции с базой данных. Имея курсор, вы можете получать 
        доступ к данным в базе данных и изменять их по мере необходимости.
        Вы может использовать курсор для извлечения данных, вставки новых данных, 
        обновления существующих данных и удаление данных.
    Шаг 4
        * Зафиксировать изменения в базе данных. Когда вы вносите в базу данных 
        изменения, эти изменения фактически не сохраняются в базе данных до тех 
        пор, пока вы их не зафиксируете. После выполнения любых операций, 
        изменяющих содержимое таблицы, следует зафиксировать эти изменения 
        в базе данных.
    Шаг 5
        Закрыть соединение с базой данных. Когда вы закончите использовать базу 
        данных, вы должны закрыть соединение.

14.4 Создание и удаление таблиц.
    После создания новой базы данных с помощью функции connect и модуля sqlite3
    необходимо добавить в базу данных одну или несколько таблиц. Для этого 
    используется инструкция CREATE_TABLE.
    Вот ее общий формат:
        CREATE_TABLE Имя таблицы (ИмяСтолбца1, ТипДанных1, 
                                  ИмяСтолбца2, ТипДанных2, ... )
    Пример:
        CREATE_TABLE Inventory (ItemID INTEGER PRIMARY KEY NOT NULL,
                                ItemName TEXT, Price REAL)
            
    Вставка нулевых данных

    cur.execute(''' INSERT INTO Inventory (ItemName, Price)
    VALUES ("Электродрель", NULL)''')

    Неявное присвоение NULL столбцу, просто оставив столбец вне инструкции INSERT
    cur.execute(''' INSERT INTO Inventory (ItemName)
    VALUES ("Электродрель"))

    Вставка значений переменных

    ''' INSERT INTO Inventory (ItemName, Price) VALUES (?, ?) '''
    Параметризованный запрос
    cur.execute(СтрокаSQL_с_Местозаполнителями, (Переменная1, Переменная2, ... ))

    Предположим, что cur это объект Cursor.

        1 item_name = "Гаечный ключ"
        2 price = 16.99
        3 cur.execute('''INSERT INTO Inventory (ItemName, Price)
        4                VALUES (?, ?)''',
        5                (item_name, price))

14.6 Запрос данных с помощью инструкции SQL SELECT 

Инструкция SELECT
        Как следует из названия, инструкция SELECT позволяет выбирать те или 
    иные строки в таблице. Простая форма этой инструкции:
        SELECT Столбцы FROM Таблица
        
        SELECT Description FROM Products
        Эта инструкция извлекает столбец Description для каждой 
        строки из таблицы Products
    SELECT Description, RetailPrice FROM Products
    Эта инструкция извлекает столбцы Description и RetailPrice для каждой строки
    таблицы Products

    В Python использование инструкции SELECT с СУБД SQLite представляет 
    собой двухшаговый процесс:
        * 1 Выполнить инструкцию SELECT. Сначала вы передаете инструкцию SELECT
        в виде строкового литерала в метод execute() объекта Cursor. СУБД 
        извлекает результаты инструкции SELECT, но не возвращает эти результаты
        в вашу программу.
        * 2 Получить результаты. После исполнения инструкции SELECT нужно вызвать
        метод fetchall() или метод fetchone() для получения результатов (fetchall 
        и fetchone являются методами объекта Cursor).
        Метод fetchall() объекта Cursor возвращает результаты инструкции SELECT 
        в виде списка кортежей.
        
        >>> cur.fetchall()
        [
            ('Плитка темного шоколада', 5.99), 
            ('Плитка средняя темного шоколада', 5.99), 
            ('Плитка молочного шоколада', 5.99), 
            ('Шоколадные трюфели', 11.99), 
            ('Плитка шоколада с карамелью', 6.99), 
            ('Плитка с малиной', 6.99), 
            ('Плитка шоколада с кешью', 9.99), 
            ('Смесь горячего шоколада', 12.99), 
            ('Стружка из полусладкого шоколада', 3.99), 
            ('Стружка из белого шоколада', 3.99)
        ]
    Выбор всех столбцов в таблице
    SELECT * FROM Chocolate

    cur.execute('SELECT * FROM Chocolate')

    Указание критериев поиска с помощью выражения WHERE
    SELECT Столбцы FROM Таблица WHERE Критерий
    Здесь Критерий - это условное выражение. Вот пример инструкции SELECT, 
    в которой используется выражение WHERE

    SELECT * FROM Chocolate WHERE RetailPrice > 10.00
    
Логические операторы языка SQL: AND, OR и NOT
    Логические операторы AND и OR можно использовать для указания нескольких 
    критериев поиска в выражении WHERE. 
    Например:
        SELECT * FROM Chocolate WHERE UnitCost > 3 AND UnitOnHand < 100

        SELECT * FROM Chocolate 
        WHERE RetailPrice > 10.00 OR UnitOnHand < 50

    Сравнение строковых значений в инструкции SELECT
        SELECT * FROM Chocolate
        WHERE Description == "плитка молочного шоколада"

        или 
        SELECT * FROM Chocolate
        WHERE lower(Description) == "плитка молочного шоколада"

    Использование оператора LIKE
        SELECT * FROM Chocolate WHERE Description LIKE "%Плитка%"
    
    Сортировка результатов запросов SELECT
        SELECT * FROM Chocolate ORDER BY RetailPrice

    Агрегатные функции
        В языке SQL агрегатная функция выполняет вычисление на наборе значений 
        из таблицы базы данных и возвращает одно значение. Например, функция
        AVG вычисляет среднее значение столбца, содержащего числовые данные.
        
        SELECT AVG(RetailPrice) FROM Chocolate
            Эта инструкция создает одно значение: среднее всех значений 
        в столбце RetailPrice.
            Вот пример, который вычисляет среднюю цену всех изделий, имеющих 
        описание, содержащее слово "Плитка":
        
        SELECT AVG(Price) FROM Chocolate WHERE Description LIKE "%Плитка%"

        Еще одной агрегатной функцией является SUM, которая вычисляет сумму 
        по столбцу, содержащему числовые значения. Следующая ниже инструкция
        вычисляет сумму значений в столбце UnitOnHand:

        SELECT SUM(UnitOnHand) FROM Chocolate

        Функции MIN и MAX определяют минимально и максимальное значение, 
        находящееся в столбце, содержащем числовые данные.
        
        SELECT MIN(RetailPrice) FROM Chocolate

        SELECT MAX(RetailPrice) FROM Chocolate

        Функция COUNT может использоваться для определения числа строк в таблице:
        SELECT COUNT(*) FROM Chocolate WHERE RetailPrice > 9.95
    
    Обновление строк
        Инструкция UPDATE используется в SQL для изменения значения существующей
        строки таблицы. Инструкция DELETE применяется для 
        удаления строк из таблицы.

        В языке SQL есть инструкция UPDATE предназначена для изменения 
        содержимого существующей строки таблицы
        
        UPDATE Таблица
        SET Столбец = Значение
        WHERE Критерий
        
        UPDATE Chocolate
        SET RetailPrice = 13.99
        WHERE Description == "Шоколадные трюфели"

        Внимание!!!!
        UPDATE Chocolate
        SET RetailPrice = 4.95
        Такая инструкция изменит все значении в столбце RetailPrice

    Обновление нескольких столбцов
        UPDATE Таблица
        SET Столбец1 = Значение1,
            Столбец2 = Значение2,
            ...
        WHERE Критерий

        Пример:
        
        UPDATE Chocolate
        SET RetailPrice = 8.99,
            UnitsOnHands = 100
        WHERE Description LIKE "%шоколада"